// Code generated by go-bindata.
// sources:
// templates/html/errors/404.html
// templates/html/errors/500.html
// templates/html/index.html
// templates/html/log-entry.html
// templates/html/log-list.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errors404Html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8f\xdb\x36\x10\x3d\xaf\x7f\x05\xcb\x00\x39\x85\x52\x9c\xba\xd8\xb6\x2b\x09\x28\xb6\x2d\x90\x43\xba\x8b\xd4\x45\xd1\xe3\x48\x1a\x5b\xb3\x4b\x91\x0c\x67\x2c\xaf\xff\x7d\x21\xf9\x4b\xfe\x48\xb6\x3d\xd1\xe4\xcc\x3c\x3e\xbe\x79\x63\x65\xdf\xfd\xfa\x70\x3f\xff\xe7\xf1\x37\xd5\x48\x6b\x8b\x49\xb6\x5f\x10\xea\x62\x72\x93\xb5\x28\xa0\x1a\x91\x60\xf0\xcb\x8a\xba\x5c\xdf\x7b\x27\xe8\xc4\xcc\x37\x01\xb5\xaa\xb6\xbb\x5c\x0b\xbe\x48\xda\xd7\xde\xa9\xaa\x81\xc8\x28\xf9\x5f\xf3\xdf\xcd\x8f\xfa\x00\xe2\xa0\xc5\x5c\x77\x84\xeb\xe0\xa3\x8c\x4a\xd7\x54\x4b\x93\xd7\xd8\x51\x85\x66\xd8\xbc\x53\x2d\x39\x6a\x57\xad\xe1\x0a\x2c\xe6\xd3\x77\xaa\x85\x97\xf1\xc1\x00\x2b\x24\x16\x8b\x3f\x3f\x7f\x52\x9f\x1e\xfe\xf8\x38\x7f\xf8\x9c\xa5\xdb\xa3\xc9\xe4\x26\xb3\xe4\x9e\x55\x13\x71\x91\xeb\x14\x98\x51\x38\xad\x98\xd3\x85\x77\x62\x60\x8d\xec\x5b\x4c\x5a\x72\x49\xc5\xac\x55\x44\x9b\x6b\x96\x8d\x45\x6e\x10\x65\x40\x1f\x00\xce\x03\x57\x10\x9f\xbe\xac\x30\x6e\xcc\x8a\x8e\x70\xe9\xff\xaf\x4f\x98\xea\x98\x94\x10\x71\x80\x38\x53\xad\x65\x08\xc1\x52\x05\x42\xde\x99\x39\x59\xbc\xf7\xd6\xc7\x91\x88\x6f\x3e\x94\x3f\xdc\xfe\x74\xfb\x7a\xe1\xc7\x16\x96\xe3\xc6\xed\xa9\xb4\x2c\x64\xd1\x4c\x67\xb3\x97\xe9\x6c\x96\x04\xb7\x3c\xaa\x70\x49\x1a\x02\x5d\x57\x4e\xc9\x26\xe0\xce\x0e\x47\x2d\xb8\x8a\x14\x44\x71\xac\x8e\x30\x4f\x07\xe9\xbe\x4f\xa6\xc9\x34\x79\x62\x5d\x64\xe9\x36\xf3\xd5\x9a\x84\xa9\x0d\x16\x93\x35\x96\xec\xab\x67\x94\x41\xfc\xff\x08\xd1\xd0\xb2\xe9\x4d\x2a\xfc\xb5\x8a\xd1\x23\x9e\xa0\x83\xed\xa9\x3e\x05\x92\x06\x5b\xe4\xb4\x86\xf8\x6c\x56\x8e\x2a\x38\x03\xcb\xd2\xed\x0c\x65\xa5\xaf\x37\xc5\x24\xab\xa9\x53\x54\xe7\x5a\x7c\x18\x94\xed\xf7\x95\x05\xe6\x5c\xf7\xcd\x00\x72\x18\xd5\x2e\x78\x1a\x45\x6b\x15\x53\x8d\x25\x44\xe3\xa0\x33\x7d\x4f\x86\xac\x9b\x0c\x06\xc8\x8b\xe0\xbe\xf4\x32\xb0\x6d\xe5\x1b\x07\x9d\x2e\x32\xda\xe7\x2d\x40\x2d\xc0\x94\x10\x59\x2b\x88\x04\xa6\xa1\xba\x46\x97\x6b\x89\x2b\xec\x1f\x45\x45\x96\xc2\x40\x2c\xad\xa9\xbb\xca\xf0\xa8\xaa\xb1\x7e\xe9\x4f\xf6\x5b\xc2\xdf\x2c\x0f\xb0\x44\x33\x8c\xef\xee\x69\xcd\xf4\x74\xb4\x9b\xe9\xf8\xfe\xc3\x7a\x55\xc6\xd2\x8b\xf8\xb6\xbf\xf2\x90\x39\xd9\xad\x87\x3e\xac\x23\x84\x80\xf1\xab\xbd\xd8\x11\x1e\x85\x1a\x8c\x5e\x17\xb3\xf7\xb3\xab\xaf\xc0\x18\x4d\x8b\xcc\xfd\x78\x15\x8f\xb0\x44\xe5\xbc\xa8\x85\x5f\xb9\x7a\x4f\x61\xcf\xe5\x9c\xca\xc2\x7b\xf9\x36\x93\xdd\x55\xc7\x64\x53\xf9\xb0\xd9\x2a\xf5\xb6\xff\x79\xf7\xd6\x95\x1c\xee\x06\xc5\xbc\x23\xf1\x51\x7d\x78\x3f\xbd\x4d\xd4\x2f\xd6\xaa\x48\xcb\x46\x58\x45\x64\x8c\x1d\xd6\x89\x7a\xf4\x6b\x8c\x58\xab\x72\xa3\xfe\x46\x60\xb4\xc9\x51\xda\xf3\xe6\x58\x84\xb8\xa0\x97\xde\x05\x27\xd2\xef\x97\x9d\x05\xab\xe8\xad\x9d\xfb\x70\xb0\x58\x6f\x65\x35\xfc\x33\xe4\xba\x26\x0e\x16\x36\x3f\x2b\xe7\x1d\xde\x5d\x3a\x0f\x62\xf4\x6b\xb3\x0a\x23\xab\x65\xe9\x6e\x6e\x86\xaf\x4a\xf1\x6f\x00\x00\x00\xff\xff\x7a\xed\xac\x0a\xa8\x06\x00\x00"

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 1704, mode: os.FileMode(420), modTime: time.Unix(1516779787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errors500Html = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8f\xdb\x36\x10\x3d\xaf\x7f\x05\xcb\x00\x39\x85\xd2\x3a\xdd\x60\xdb\xae\x24\xa0\xd8\xa6\x40\x0e\xe9\x06\xa9\x8b\xa2\xc7\x91\x34\xb6\x66\x97\x22\x99\x19\x5a\x5e\x23\xc8\x7f\x2f\x24\x7f\xc9\x1f\x49\xda\x13\x4d\xce\xcc\xe3\xe3\x9b\x37\x56\xf6\xc3\x6f\x0f\xf7\xb3\x7f\x3e\xbc\x55\x4d\x6c\x6d\x31\xc9\x76\x0b\x42\x5d\x4c\xae\xb2\x16\x23\xa8\x26\xc6\x60\xf0\xd3\x92\xba\x5c\xdf\x7b\x17\xd1\x45\x33\x5b\x07\xd4\xaa\xda\xec\x72\x1d\xf1\x39\xa6\x7d\xed\x9d\xaa\x1a\x60\xc1\x98\xff\x35\xfb\xdd\xfc\xa4\xf7\x20\x0e\x5a\xcc\x75\x47\xb8\x0a\x9e\xe3\xa8\x74\x45\x75\x6c\xf2\x1a\x3b\xaa\xd0\x0c\x9b\x57\xaa\x25\x47\xed\xb2\x35\x52\x81\xc5\x7c\xfa\x4a\xb5\xf0\x3c\x3e\x18\x60\x23\x45\x8b\xc5\x9f\x1f\xdf\xab\xf7\x0f\x7f\xbc\x9b\x3d\x7c\xcc\xd2\xcd\xd1\x64\x72\x95\x59\x72\x4f\xaa\x61\x9c\xe7\x3a\x05\x11\x8c\x92\x56\x22\xe9\xdc\xbb\x68\x60\x85\xe2\x5b\x4c\x5a\x72\x49\x25\xa2\x15\xa3\xcd\xb5\xc4\xb5\x45\x69\x10\xe3\x80\x3e\x00\x9c\x06\x2e\x20\x3e\x7e\x5a\x22\xaf\xcd\x92\x0e\x70\xe9\xff\xaf\x4f\x84\x6a\x4e\x4a\x60\x1c\x20\x4e\x54\x6b\x05\x42\xb0\x54\x41\x24\xef\xcc\x8c\x2c\xde\x7b\xeb\x79\x24\xe2\x8b\xd7\xe5\x9b\xdb\x9f\x6f\xbf\x5f\xf8\xae\x85\xc5\xb8\x71\x3b\x2a\xad\x44\xb2\x68\xa6\x37\x37\xcf\xd3\x9b\x9b\x24\xb8\xc5\x41\x85\x73\xd2\x10\xe8\xb2\x72\x2a\xae\x03\x6e\xed\x70\xd0\x42\x2a\xa6\x10\x95\x70\x75\x80\x79\xdc\x4b\xf7\x63\x32\x4d\xa6\xc9\xa3\xe8\x22\x4b\x37\x99\xdf\xad\x49\x84\xda\x60\x31\x59\x61\x29\xbe\x7a\xc2\x38\x88\xff\x1f\x21\x1a\x5a\x34\xbd\x49\xa3\x7c\xad\x62\xf4\x88\x47\xe8\x60\x73\xaa\x8f\x81\x62\x83\x2d\x4a\x5a\x03\x3f\x99\xa5\xa3\x0a\x4e\xc0\xb2\x74\x33\x43\x59\xe9\xeb\x75\x31\xc9\x6a\xea\x14\xd5\xb9\x8e\x3e\x0c\xca\xf6\xfb\xca\x82\x48\xae\xfb\x66\x00\x39\x64\xb5\x0d\x1e\x47\xd1\x5a\x25\x54\x63\x09\x6c\x1c\x74\xa6\xef\xc9\x90\x75\x95\xc1\x00\x79\x16\xdc\x95\x9e\x07\x36\xad\x7c\xe1\xa0\xd3\x45\x46\xbb\xbc\x39\xa8\x39\x98\x12\x58\xb4\x02\x26\x30\x0d\xd5\x35\xba\x5c\x47\x5e\x62\xff\x28\x2a\xb2\x14\x06\x62\x69\x4d\xdd\x45\x86\x07\x55\x8d\xf5\x0b\x7f\xb4\xdf\x10\xfe\x66\x79\x80\x05\x9a\x61\x7c\xb7\x4f\x6b\xa6\xc7\xa3\xdd\x4c\xc7\xf7\xef\xd7\x8b\x32\x96\x3e\x46\xdf\xf6\x57\xee\x33\x27\xdb\x75\xdf\x87\x15\x43\x08\xc8\x5f\xed\xc5\x96\xf0\x28\xd4\x20\x7b\x5d\xbc\xb9\xbe\xbe\xf8\x0a\x64\x36\x2d\x8a\xf4\xe3\x55\x7c\xfe\xac\xde\x32\x7b\x56\x5f\xbe\xec\xee\xdf\x11\x39\xe5\x31\xf7\x3e\x7e\x9b\xc6\xf6\x9e\x43\xb2\xa9\x7c\x58\x6f\x64\x7a\xd9\xff\xbc\x7b\xe9\x4a\x09\x77\x83\x5c\xde\x51\xf4\xac\x5e\x5f\x4f\x6f\x13\xf5\xab\xb5\x8a\x69\xd1\x44\x51\x8c\x82\xdc\x61\x9d\xa8\x0f\x7e\x85\x8c\xb5\x2a\xd7\xea\x6f\x04\x41\x9b\x1c\x74\x3d\xed\x8c\x45\xe0\x39\x3d\xf7\x16\x38\xd2\x7d\xb7\x6c\xfd\x57\xb1\xb7\x76\xe6\xc3\xde\x5f\xbd\x8f\xd5\xf0\xb7\x90\xeb\x9a\x24\x58\x58\xff\xa2\x9c\x77\x78\x77\x6e\x3b\x60\xf6\x2b\xb3\x0c\x23\x9f\x65\xe9\x76\x68\x86\x4f\x4a\xf1\x6f\x00\x00\x00\xff\xff\x68\x6e\x31\x6a\xa5\x06\x00\x00"

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 1701, mode: os.FileMode(420), modTime: time.Unix(1516779787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x73\xdb\x36\x0c\x7e\x96\x7e\x05\xa6\xae\x6d\x72\x57\x4a\x75\xe7\x2c\x5b\x23\xeb\xd6\x79\xdb\x5d\x1f\xb2\xe6\x1a\x67\xbd\x3d\xd2\x12\x6c\x31\xa5\x48\x95\xa0\xed\xb8\x9e\xff\xfb\x8e\x92\x2c\xcb\x8e\x9d\x34\xd7\x17\x89\x24\xf0\x7d\x04\x01\x10\x60\xfc\xc3\x1f\x1f\x86\xa3\x7f\xaf\xfe\x84\xdc\x16\x32\xf1\xe3\xcd\x0f\x79\x96\xf8\x5e\x5c\xa0\xe5\x90\x5b\x5b\x32\xfc\x32\x13\xf3\x41\x30\xd4\xca\xa2\xb2\x6c\xb4\x2c\x31\x80\xb4\x9e\x0d\x02\x8b\x77\x36\x72\xd8\x0b\x48\x73\x6e\x08\xed\xe0\x66\xf4\x17\xfb\x25\x68\x49\x14\x2f\x70\x10\xcc\x05\x2e\x4a\x6d\x6c\x07\xba\x10\x99\xcd\x07\x19\xce\x45\x8a\xac\x9a\xbc\x82\x42\x28\x51\xcc\x0a\x46\x29\x97\x38\xe8\xbd\x82\x82\xdf\x75\x17\x2a\x5a\x2b\xac\xc4\xe4\xfa\xe3\x25\x5c\x7e\xf8\xfb\xfd\xe8\xc3\xc7\x38\xaa\x97\x7c\xdf\x8b\xa5\x50\x9f\x21\x37\x38\x19\x04\x11\x27\x42\x4b\x51\x4a\x14\x4d\xb4\xb2\x8c\x2f\x90\x74\x81\x61\x21\x54\x98\x12\x05\x60\x50\x0e\x02\xb2\x4b\x89\x94\x23\xda\x8a\xbd\x22\xd8\x17\x1c\x60\xbc\xfd\x32\x43\xb3\x64\x33\xb1\xa5\x8b\x9e\x8e\x0f\x49\x64\x26\x1c\x73\x83\x15\xc5\x9e\xd7\x0a\xe2\x65\x29\x45\xca\xad\xd0\x8a\x8d\x84\xc4\xa1\x96\xda\x74\x9c\xf8\xec\xcd\xf8\xec\xfc\xd7\xf3\xc7\x81\xef\x0b\x3e\xed\x06\x6e\x63\x4a\x41\x56\x48\x64\xbd\x7e\xff\xae\xd7\xef\x87\xa5\x9a\x6e\xbd\x70\xdf\x68\x5e\x8a\xc3\x9e\x03\xbb\x2c\xb1\x49\x87\xad\x2f\x28\x35\xa2\xb4\x40\x26\xdd\xd2\xdc\xb6\xae\xfb\x29\xec\x85\xbd\xf0\x96\x82\x24\x8e\x6a\xcd\x47\x31\x21\x89\xa2\x94\x18\x2e\x70\x4c\x3a\xfd\x8c\xb6\x72\xfe\x37\x52\xe4\x62\x9a\xbb\x24\xb5\x74\x0c\xd1\x39\xc4\x2d\x9f\xf3\x7a\x35\xd8\x25\xb2\x39\x16\x48\x51\xc6\xcd\x67\x36\x53\x22\xe5\xdf\x43\x76\x4b\x51\xa1\x95\xb0\xda\xec\xb1\xc4\x51\x7d\x13\xe3\xb1\xce\x96\x89\x1f\x67\x62\x0e\x22\x1b\x04\x56\x97\x55\x7c\xdc\x3c\x95\x9c\x68\x10\xb8\x90\x72\xa1\xd0\x40\x23\xdc\x95\xa2\x94\x40\x22\xc3\x31\x37\x4c\xf1\x39\x73\x91\xad\xb4\xbc\x98\x57\x94\xf7\x84\x1b\xe8\x7d\x41\x9d\x10\xcf\x14\x9f\x07\x49\x2c\x36\x7a\x13\x0e\x13\xce\xc6\xdc\x50\x00\xdc\x08\xce\x72\x91\x65\xa8\x06\x81\x35\x33\x74\x87\x12\x49\x1c\xf1\xca\xb0\x28\x13\xf3\x83\x16\x6e\x63\xc3\xa4\x9e\xea\x9d\x79\x6d\xf0\x83\xf0\x92\x4f\x91\x55\x45\xa0\x39\x5a\xde\xdb\x2d\x10\x79\xaf\xbb\x7f\xfb\x3f\xe8\xc6\xb1\xb6\x56\x17\xf5\x96\x8d\x8e\xf3\x93\xd2\x56\xa4\xd5\x79\x2a\xb0\xdf\xd2\xf8\xcd\xbf\xd5\x5c\x18\x5e\x96\x68\x8e\x06\x6a\x43\x7d\x54\xea\xed\x8b\x24\x3b\xaf\x97\x8f\x98\x5c\xf2\x2c\xc3\xac\x51\xf1\xe2\xbc\x9f\x5c\xa3\x71\x85\x95\x20\x47\x2e\x6d\x0e\x64\xb9\x9d\x51\x1c\xe5\xfd\x8d\xd2\xc6\x5a\x6a\x34\x59\xc7\x82\xd6\xd3\x1d\xa7\x77\x47\x7b\xc6\x9d\x35\x3b\x3f\xcd\xc2\x25\x55\x56\xed\x1b\x95\x8c\xb4\xe5\x12\x86\x57\x37\x6f\x21\x1e\x27\xab\x15\x4c\x29\x1c\x5e\xdd\xfc\x27\x51\x4d\x6d\x0e\xeb\x75\x1c\x8d\xbb\x16\x76\x51\xff\x14\x58\x74\x60\x97\x58\x54\xeb\x51\xef\xf5\x9b\x9f\xdd\xa7\x0f\xeb\xf5\xe5\xef\x07\x09\xde\xcd\xb9\x90\x7c\x2c\x11\x1a\x8e\xca\x3b\x7c\xce\x0a\x2c\x58\x1a\x24\xaf\x8f\xe0\x6e\x08\xb3\x1d\xc8\x8c\x30\x7b\x0c\x74\xbd\xe0\xe5\x90\xa7\x39\x66\x2d\x8c\xd2\x47\x40\x75\x01\x48\x4b\x56\x97\x3e\x62\xba\x44\x15\xdc\xe7\xae\x87\x5e\x9c\x9f\x25\xc3\xab\x1b\x10\x6a\xa2\xe3\x28\x3f\x6b\xd7\x3b\x3a\x5e\x3c\x93\xed\x78\xf5\x1c\x26\xda\x40\x0a\x42\x35\x2e\x87\xe7\x6b\x7f\x23\x75\x3d\xa1\x55\xf5\xbc\xe1\xd5\xcd\x6a\x05\x69\xa5\xb5\x5e\x43\x3d\xd6\x06\xc9\xcd\x52\x6d\xf0\x84\x4e\xe1\xb7\x7a\xfd\x32\xff\xea\xdc\x9e\x7f\xdd\x72\x45\x8e\xac\xb3\x31\xaa\xcc\xed\xfd\x7c\xdd\x1a\x16\x6d\x2d\xdb\x39\xe1\xa1\xcc\xf4\x76\xd2\x73\x73\x2d\xf7\x52\x51\x22\x37\x13\x71\xb7\xbd\xc0\x4f\xba\x7f\xfd\xee\xfd\x73\x81\x68\xf5\x59\x5a\xce\x18\x75\xe3\x70\xfc\xa2\x3c\xc0\xe2\x62\xff\xdd\x2c\x07\xf1\x9b\xf2\xf4\x60\x5f\x4a\x7c\xcf\xf7\xbd\x1f\x4f\x26\x33\x95\xba\x47\xc3\xc9\x29\xac\x7c\x0f\x00\xdc\x93\x81\xb4\xc4\x50\xea\xe9\x49\x40\x96\x1b\x0b\x0b\x0a\x4e\x2f\x6a\xa9\x50\xc2\x7e\xba\x3e\x79\xb9\x5a\x41\xae\xc9\xc2\x7a\xfd\xf2\x15\xb8\xd9\x82\xdc\x7b\xcf\xcd\x9d\xea\xfa\xf4\xc2\xf7\x3d\x7f\xdb\xe0\xb6\xe5\x73\xbf\x7a\x4e\xb4\xb6\x0f\x17\xcf\xce\xc9\x6b\x65\x96\xea\x72\x59\x3b\xe5\x85\x1b\x5e\xbc\x50\x63\x2a\x2f\xaa\x0e\x50\xb7\x57\x78\xf3\xba\x77\x1e\xc2\x3b\x29\xc1\x88\x69\x6e\x09\x0c\xba\xc2\x87\x59\x08\x57\x7a\x81\x06\x33\x18\x2f\xe1\x13\x72\x42\x19\x7e\x7b\x12\xed\x1f\xa2\x69\xa9\xa9\xd1\x52\x8e\x74\xd9\xb6\x4c\xd7\x9a\xa1\x7a\x2f\x0d\x82\x4c\x50\x29\xf9\xf2\x2d\x28\xad\xf0\xe2\x7e\x27\xe5\xc6\xe8\x05\x9b\x95\x9d\xd6\x19\x47\xcd\x3b\xa0\x7a\x6b\x27\xff\x07\x00\x00\xff\xff\x20\xaa\x1e\x18\xbe\x0b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3006, mode: os.FileMode(420), modTime: time.Unix(1516779787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logEntryHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xc1\x8e\xdb\x36\x13\x3e\xdb\x4f\xc1\x5f\x01\x72\xf9\x23\xc9\x76\xbd\xdd\x76\x57\x12\x50\x6c\x5b\x60\x81\xa6\x1b\x24\x2e\x8a\x1e\x69\x71\x6c\x71\x97\x12\x19\x92\x96\xd7\xd8\x18\x48\x7b\x0a\xd0\x43\x0f\xbd\xb7\x68\x9f\x20\x1b\x34\xa8\xd1\x20\x9b\x57\xa0\xdf\xa8\x10\x25\x5b\xf2\xda\xde\xa4\xe8\xa1\x27\x8b\xe4\xcc\xc7\x6f\xe6\x1b\xce\x38\xf8\xdf\xe7\x67\x27\x83\xef\x1e\x7d\x81\x12\x9d\xb2\xa8\x1d\xac\x7e\x00\x93\xa8\xdd\x0a\x52\xd0\x18\x25\x5a\x0b\x17\x9e\x4e\x68\x1e\x3a\x27\x3c\xd3\x90\x69\x77\x30\x13\xe0\xa0\xb8\x5c\x85\x8e\x86\x4b\xed\x17\xbe\xc7\x28\x4e\xb0\x54\xa0\xc3\x6f\x06\x5f\xba\x9f\x38\x6b\x90\x0c\xa7\x10\x3a\x39\x85\xa9\xe0\x52\x37\x5c\xa7\x94\xe8\x24\x24\x90\xd3\x18\x5c\xbb\x78\x80\x52\x9a\xd1\x74\x92\xba\x2a\xc6\x0c\xc2\xee\x03\x94\xe2\xcb\xe6\x86\x85\xd5\x54\x33\x88\x9e\x3c\x7e\x88\x1e\x9e\x7d\x7d\x3a\x38\x7b\x1c\xf8\xe5\x56\xbb\xdd\x0a\x18\xcd\x2e\x50\x22\x61\x14\x3a\x3e\x56\x0a\xb4\xf2\x63\xa5\xfc\x11\xcf\xb4\x8b\xa7\xa0\x78\x0a\x5e\x4a\x33\x2f\x56\xca\x41\x12\x58\xe8\x28\x3d\x63\xa0\x12\x00\x6d\xd1\x2d\xc0\xed\x83\x1d\x88\xe7\x4f\x27\x20\x67\xee\x84\xd6\x70\xfe\x3f\xf7\xf7\x14\x25\xd2\x1b\x62\x09\x16\xe2\x56\xd6\x52\x85\x85\x60\x34\xc6\x9a\xf2\xcc\x1d\x50\x06\x27\x9c\x71\xd9\x48\xe2\xbd\xde\xf0\xe0\xf0\xd3\xc3\xf7\x3b\x9e\xa6\x78\xdc\x14\x6e\x45\x25\x55\x9a\x32\x70\xbb\xfd\xfe\x65\xb7\xdf\xf7\x44\x36\xae\xb3\xb0\x4d\x1a\x0b\xba\x3b\x73\x48\xcf\x04\x54\xe5\x50\xe7\x42\xc5\x92\x0a\x8d\x94\x8c\x6b\x98\xf3\x75\xea\x3e\xf2\xba\x5e\xd7\x3b\x57\x4e\x14\xf8\xa5\xe5\x7b\x7d\x3c\x45\x53\xc1\xc0\x9b\xc2\x50\xf1\xf8\x02\xb4\x4d\xfe\x07\x42\x24\x74\x9c\x14\x45\xaa\xd5\x3e\x8f\x46\x10\xe7\x38\xc7\xe5\xae\xb3\x09\xa4\x13\x48\x41\xf9\x04\xcb\x0b\x77\x92\xd1\x18\xff\x1b\xb0\x73\xe5\xa7\x3c\xa3\x9a\xcb\x5b\x28\x81\x5f\xbe\xc4\x60\xc8\xc9\x2c\x6a\x07\x84\xe6\x88\x92\xd0\xd1\x5c\x58\x7d\x8a\x75\xcc\xb0\x52\xa1\x53\x48\x8a\x69\x06\x12\x55\x87\x9b\xa7\xc0\x18\x52\x94\xc0\x10\x4b\x37\xc3\xb9\x5b\x28\x6b\xad\x5a\x01\xb6\x90\x5b\x87\x2b\xd7\xed\x83\xb2\x20\xee\x65\x38\x77\xa2\x80\xae\xec\x46\x18\x8d\xb0\x3b\xc4\x52\x39\x08\x4b\x8a\xdd\x84\x12\x02\x59\xe8\x68\x39\x81\x22\x28\x1a\x05\x3e\xb6\xc4\x7c\x42\xf3\x9d\x0c\x6b\x6d\x5c\xc6\xc7\x7c\x63\x5d\x12\xbe\xd3\x5d\xe0\x31\xb8\xb6\x09\x54\xa1\x25\xdd\xcd\x06\x91\x74\x9b\xf7\xaf\x7f\x77\xa6\x71\xc8\xb5\xe6\x69\x79\x65\x7b\x6d\xdc\xae\x7e\xd7\x52\x4c\x25\x16\x02\xe4\x5e\x39\x2a\x80\xd6\x9e\x5b\x04\x26\x04\x88\x53\x48\x2c\x2d\x67\xcb\x7b\x0f\x50\xab\x94\xab\x7a\x90\x4e\x64\x7e\x36\x6f\xcc\x4b\xf3\xca\xbc\x35\x2f\x97\x3f\x15\xd9\x45\xcf\x50\x6d\xc0\xf8\xd8\xbf\xba\x42\x90\x69\x39\xf3\x9e\x80\x2c\x5a\x2c\x9a\xcf\x0b\xc7\x5f\x96\x2f\xcc\xc2\x5c\x9b\xbf\xcc\x02\xed\x30\xa9\x84\x5a\x07\x6d\x73\xd9\xdb\x21\xb6\xd6\xc5\x13\x6e\x20\xe4\x20\xa9\x9e\x7d\x05\x39\x30\xf4\x7f\xd4\x43\xf3\x39\x52\xd5\xe6\xdd\x66\x7b\x8b\xa6\xe6\x77\x9a\x8d\xb8\x25\x97\xf4\xa2\xbd\x69\xaa\x33\xda\xaa\x4c\xca\xaf\x56\xa0\xf1\xb0\x98\x0e\xad\x6a\x25\x57\x9f\xad\x40\x93\xc8\xfc\x66\x6e\xcc\xf5\xf2\xc7\xe5\x0f\x66\x61\x5e\x23\xf3\x6e\xf9\xdc\xdc\x98\x85\xf9\xd3\xdc\x2c\x5f\x98\x37\xe6\x26\xf0\x35\xd9\xf0\x58\xd3\x3a\x8b\xe3\x89\x04\xf2\x8c\x60\x0d\x47\x4e\xa7\xe7\x75\xba\x5e\xaf\xd3\xf9\x18\x75\x0f\x8e\x3a\xfd\xa3\xce\x81\x63\x49\xd7\xee\x81\x5f\x5f\xbe\x83\xc7\xeb\xe5\x73\xf3\xca\x2c\x96\xdf\xef\xbf\xb2\xa9\xd4\x07\xe2\xfe\x6e\x16\xe6\x1d\xb2\xd1\x54\xc2\x6f\xc1\xff\x27\xf2\xee\x09\x20\xf0\x1b\x72\xad\x5f\xfc\x46\x41\x36\xd5\x67\x80\xe5\x88\x5e\x16\x90\x6b\xd3\xa4\x1f\x99\x5f\xcd\x8d\xf9\xc3\x4a\x79\x6d\xde\x16\x22\x26\xfd\xfd\xa5\xb3\xaa\x19\x21\x57\x65\x72\x75\x85\x08\x68\x4c\x99\x42\xf3\x79\x45\x65\x75\x5a\xdf\x54\xb7\x94\xba\x4f\xdc\x6e\x13\x23\xce\xf5\xdd\x5d\xa2\x22\x55\x1b\xbb\x31\x17\xb3\x92\xd3\xfd\xe2\xf3\xf8\x7e\x36\x54\xe2\xd8\x36\xb4\x72\x5a\xa0\x5e\xa7\x7b\xe8\xa1\xcf\x18\x43\x92\x8e\x13\xad\x90\x04\x05\x32\x07\xe2\xa1\x47\x7c\x0a\x12\x08\x1a\xce\xd0\xb7\x80\x15\x30\xaf\xdd\x4c\xdf\xdd\xd9\xbb\x15\x44\x35\x21\x62\xc9\x19\x1b\x70\xb1\x9e\x00\xc5\xa4\x41\x76\xfc\x87\x0e\xa1\x4a\x30\x3c\x3b\x42\x19\xcf\xe0\x78\x7b\x30\x60\x29\xf9\xd4\x9d\x88\xc6\x24\x08\xfc\x6a\xac\xd9\xbf\x8e\xd1\xdf\x01\x00\x00\xff\xff\x11\xb5\x42\xb5\x8d\x0a\x00\x00"

func logEntryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_logEntryHtml,
		"log-entry.html",
	)
}

func logEntryHtml() (*asset, error) {
	bytes, err := logEntryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-entry.html", size: 2701, mode: os.FileMode(420), modTime: time.Unix(1516779787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _logListHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x8f\xd3\x46\x10\x7e\x4e\x7e\xc5\xd4\x08\x5e\xc0\x76\x92\x1e\xa5\xbd\xb3\x5d\x55\xd0\x4a\x27\x41\x0f\xc1\x55\x55\x1f\x37\xf6\x24\xde\x63\xed\x35\xbb\x9b\xe4\xa2\x10\x09\x50\x25\xfa\x50\xa9\x12\xed\x43\x55\xa9\xed\x5f\x08\x27\x10\x27\xd0\x5d\xff\xc2\xf8\x1f\x55\xb6\x93\x8b\x93\xcb\x1d\x54\x7d\x72\x76\x77\xe6\x9b\xd9\x6f\xbe\x9d\x89\xf7\xc9\x9d\xbd\xdb\xfb\x3f\xdc\xff\x1a\x62\x93\x88\xa0\xe9\x2d\x3e\xc8\xa2\xa0\xd9\xf0\x12\x34\x0c\x62\x63\x32\x1b\x1f\x0f\xf8\xd0\xb7\x6e\xcb\xd4\x60\x6a\xec\xfd\x71\x86\x16\x84\xd5\xca\xb7\x0c\x1e\x1a\xb7\xf0\xdd\x81\x30\x66\x4a\xa3\xf1\xbf\xdb\xff\xc6\xfe\xdc\x3a\x03\x49\x59\x82\xbe\x35\xe4\x38\xca\xa4\x32\x35\xd7\x11\x8f\x4c\xec\x47\x38\xe4\x21\xda\xe5\xe2\x06\x24\x3c\xe5\xc9\x20\xb1\x75\xc8\x04\xfa\xed\x1b\x90\xb0\xc3\xfa\x46\x09\x6b\xb8\x11\x18\x3c\x7c\x70\x0f\xee\xed\x7d\xbb\xbb\xbf\xf7\xc0\x73\xab\xad\x66\xb3\xe1\x09\x9e\x3e\x82\x58\x61\xcf\xb7\x5c\xa6\x35\x1a\xed\x86\x5a\xbb\x3d\x99\x1a\x9b\x8d\x50\xcb\x04\x9d\x84\xa7\x4e\xa8\xb5\x05\x0a\x85\x6f\x69\x33\x16\xa8\x63\x44\x53\xa2\x97\x00\xeb\x07\x1b\x10\x0f\x1e\x0f\x50\x8d\xed\x01\x5f\xc2\xb9\xff\xdd\xdf\xd1\x3c\x52\x4e\x97\x29\x2c\x21\xd6\x58\x4b\x34\xcb\x32\xc1\x43\x66\xb8\x4c\xed\x7d\x2e\xf0\xb6\x14\x52\xd5\x48\xbc\xd2\xe9\xde\xbc\xf5\xc5\xad\x0f\x3b\xee\x26\xac\x5f\x2f\xdc\x22\x95\x44\x1b\x2e\xd0\x6e\x6f\x6d\x1d\xb6\xb7\xb6\x9c\x2c\xed\x2f\x59\x38\x9f\x34\xcb\xf8\x66\xe6\xc0\x8c\x33\x9c\xcb\x61\xc9\x85\x0e\x15\xcf\x0c\x68\x15\x2e\x61\x0e\xce\xa8\xfb\xd4\x69\x3b\x6d\xe7\x40\x5b\x81\xe7\x56\x96\x1f\xf4\x71\x34\x4f\x32\x81\xce\x08\xbb\x5a\x86\x8f\xd0\x94\xe4\x7f\x24\x44\xcc\xfb\x71\x21\x52\xa3\x2f\xf2\xa8\x5d\xe2\x80\x0d\x59\xb5\x6b\xad\x02\x99\x18\x13\xd4\x6e\xc4\xd4\x23\x7b\x90\xf2\x90\xfd\x1f\xb0\x03\xed\x26\x32\xe5\x46\xaa\x35\x14\xcf\xad\x5e\xa2\xd7\x95\xd1\x38\x68\x7a\x11\x1f\x02\x8f\x7c\xcb\xc8\xac\xac\x4f\xb1\x0e\x05\xd3\xda\xb7\x8a\x92\x32\x9e\xa2\x82\xf9\xe1\xea\x29\x0a\x01\x9a\x47\xd8\x65\xca\x4e\xd9\xd0\x2e\x2a\x5b\x5a\x35\x3c\x56\x42\x9e\x3b\x5c\xb8\x9e\x3f\xa8\x04\x71\x25\x65\x43\x2b\xf0\xf8\xc2\xae\xc7\xa0\xc7\xec\x2e\x53\xda\x02\xa6\x38\xb3\x63\x1e\x45\x98\xfa\x96\x51\x03\x2c\x2e\xc5\x03\xcf\x65\x65\x62\x6e\xc4\x87\x1b\x33\x5c\xd6\xc6\x16\xb2\x2f\x57\xd6\x55\xc2\x97\xba\x67\xac\x8f\x76\xd9\x04\xe6\x57\x8b\xdb\xab\x0d\x22\x6e\xd7\xe3\x9f\x7d\x37\xd2\xd8\x95\xc6\xc8\xa4\x0a\xd9\x3c\x33\x6e\xce\xbf\x67\xa5\x18\x29\x96\x65\xa8\x2e\x2c\xc7\x1c\xa0\x71\x41\x94\x8c\x45\x11\x46\x55\xba\x55\xca\x9d\x80\xfe\xca\x7f\xa2\x63\x7a\x45\xef\xe8\x18\xf2\x67\xf4\x26\x7f\x4a\x47\x74\x9c\x3f\xa3\x19\x4c\x26\xa0\x51\x15\xcd\x12\xa6\x53\xcf\x8d\x3b\x25\xfc\x85\xa1\x1b\x55\x81\xe7\x4f\xd8\x0a\xe8\x57\x7a\x4f\x33\x3a\xa2\x13\x9a\xe5\xbf\x14\xf5\x80\x27\xa5\xd1\xe4\x2a\xf0\x1e\xc8\x5e\x4f\xa3\x81\x00\x5a\x70\x75\xba\xe6\x2c\x64\xdf\x5d\x89\xee\x5a\x81\xe7\x01\xbd\x84\x12\xec\x05\xcd\xe8\x3d\x9d\xd6\x20\x2f\x73\xfd\xb2\x8a\xe4\x4f\x26\x8b\x98\x36\x08\x9e\x70\x03\xd3\xa9\x15\x78\x40\x7f\xd2\x8c\xde\xd2\x8c\x5e\xaf\xe6\x88\x69\xc4\x7b\x1f\x93\xdb\xf9\x00\xd7\x6b\x01\xe8\x25\xfd\x53\xd2\xfa\x86\x5e\xc3\x42\x96\x4b\x61\xad\xd2\x29\x90\xa9\x1e\x3f\x2c\x24\xbc\xf1\x7c\x9d\x6e\xc3\xba\xd5\x14\x2a\x17\xaa\xda\x6d\x78\x26\x0e\xe8\x8f\xfc\x29\x1d\xe7\xcf\xe9\x38\x7f\x41\x27\x74\x9a\x3f\xcb\x9f\xe7\x3f\x7b\xae\x89\xeb\x46\xbf\xd1\x2c\x7f\x4e\x33\xa0\x23\x3a\xa5\xb7\x74\x42\xc7\xf4\xae\xb0\xa6\x23\x7a\x53\xac\x8a\xba\xad\x7a\xfc\x4e\x27\xf9\x8f\x05\xf7\x2b\xdb\x8e\xb3\xdc\xf0\xdc\x22\x91\x05\x8b\x3d\xa9\x40\x00\x4f\x41\xc8\xbe\x5e\xb0\x59\xcb\xb5\xe1\x99\x68\xc3\xcb\x36\xa6\xe8\xd7\x93\x09\x08\xe7\x21\x0e\x51\x71\x33\xbe\x8b\x43\x14\x70\x1d\x3a\x30\x9d\x82\x9e\x6f\x5e\x6c\x72\x49\x67\x30\x51\x3d\x78\x89\xb0\x17\x86\x03\x85\xd1\x93\x88\x19\xdc\xb6\x5a\x1d\xa7\xd5\x76\x3a\xad\xd6\x67\xd0\xbe\xb9\xdd\xda\xda\x6e\xdd\xb4\xca\x37\xb0\xc1\x73\x37\xed\xc9\x0d\x67\x4b\xc1\x24\xa8\x35\xeb\xa3\x5b\x5a\xdf\x95\xfd\xdd\x3b\x95\xa0\xe9\x6f\x3a\xa5\xd7\xf9\x53\x3a\xa5\x57\x05\xe7\x85\x34\x6a\x28\x15\x8d\x4b\x2d\x16\x44\x5e\x9d\x36\x17\x14\x57\x85\x5f\x51\xd2\xb2\xdd\x2c\x7b\xc8\x7a\x0b\xe9\x49\x69\x2e\xef\x20\x73\xc5\x2d\x8d\xed\x50\x66\xe3\x4a\x70\xd7\x8a\x9f\x3b\xd7\xd2\xae\xce\x76\xca\x66\x57\x4d\x12\xe8\xb4\xda\xb7\x1c\xf8\x4a\x08\x50\xbc\x1f\x1b\x0d\x0a\x8b\xf7\x81\x91\x03\xf7\xe5\x08\x15\x46\xd0\x1d\xc3\xf7\xc8\x34\x0a\xa7\x96\xe6\x87\xd4\xbf\x76\x89\xf9\xf4\x08\x95\x14\x62\x5f\x66\x67\xd3\xa1\x98\x42\x50\xfe\x35\xf0\xad\x88\xeb\x4c\xb0\xf1\x36\xa4\x32\xc5\x9d\xf3\x43\x83\x29\x25\x47\xf6\x20\xab\x4d\x09\xcf\x9d\x8f\xbc\xf2\x6f\x65\xf0\x6f\x00\x00\x00\xff\xff\xa6\x6a\x98\x20\xa9\x0a\x00\x00"

func logListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_logListHtml,
		"log-list.html",
	)
}

func logListHtml() (*asset, error) {
	bytes, err := logListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "log-list.html", size: 2729, mode: os.FileMode(420), modTime: time.Unix(1516779787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/404.html": errors404Html,
	"errors/500.html": errors500Html,
	"index.html": indexHtml,
	"log-entry.html": logEntryHtml,
	"log-list.html": logListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{errors404Html, map[string]*bintree{}},
		"500.html": &bintree{errors500Html, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"log-entry.html": &bintree{logEntryHtml, map[string]*bintree{}},
	"log-list.html": &bintree{logListHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

